class User < ActiveRecord::Base
	attr_accessor    :password
	attr_accessible( :login, :email, :password, :password_confirmation )

	# email_validation_regex = /[\w+\-.]+@[a-z\d.\-]+\.[a-z]+\z/i 


	validates :login, 
						:presence => true,
					  :length  	=> { :maximum => 50 }

	validates :email, 
						:presence 		=> true,
					  :format      	=> { :with => /[\w+\-.]+@[a-z\d.\-]+\.[a-z]+\z/i },  # email_validation_regex
					  :uniqueness  	=> { :case_sensitive => false }
	
	validates :password, 
						:presence 		=> true,
						:confirmation => true,
						:length	   		=> { :within => 6..40 }


	# call-back: a method that is called at a particular time in the lifecyle of an object
	#  (as opposed to being called explicitly by your code)  
	before_save :encrypt_password

    def has_password?(submitted_password)
  	  self.crypted_password == encrypt(submitted_password)	  	
    end

    def User.authenticate(email, submitted_password)
      user = User.find_by_email(email)	
      return nil  if user.nil?
      return user if user.has_password?(submitted_password)
    end

    def User.authenticate_with_salt(id, cookie_salt)
    	user = find_by_id(id)
    	(user && user.salt == cookie_salt) ? user : nil
    end


  private

	  def encrypt_password
	  	self.salt = make_salt if self.new_record?
	  	self.crypted_password = encrypt(self.password)
	  end

	  def encrypt(string)
	  	# secure_hash("#{string}")
	  	secure_hash("#{salt}--#{string}")
	  end

	  def secure_hash(string)
	  	Digest::SHA2.hexdigest(string)
	    # string
	  end

	  def make_salt
	  	 secure_hash("#{Time.now.utc}--#{self.password}")
	  	# "#{Time.now.utc}--#{self.password}"
	  end

end


